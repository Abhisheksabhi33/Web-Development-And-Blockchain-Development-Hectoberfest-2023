<%- include('./osPartials/templateStart') %>

<style>
    @media (max-width: 768px) {

    }

</style>
<br>
<h1 id="heading" style="text-align: center;"> Process Synchronization</h1>
<hr>
<br>

A cooperating process is one that can affect or be affected by other process executing in the system.

<br><br>
Cooperating process can either 
<ol>
    <li>Directly share a logical address space (that is, both code and data).</li>
    <li>or be allowed to share data only through files or messages.</li>
</ol>
<b>Concurrent access to shared data may result in data inconsistency!</b>
<br><br>
In this chapter, we discuss various mechanisms to ensure - The orderly execution of cooperating processes that share a logical address space, so that data consisitency is maintained.

<br><br>
<h4><b><u>Producer Consumer Problem</u></b></h4>

A producer process produces information that is consumed by a consumer process. 
<br><br>
For example, a compiler may produce assembly code, which is consumed by assembler. The assembler, in turn, may produce object modules, which are consumed by the loader.
<ul>
    <li>One solution to the producer-consumer problem uses <b>shared memory</b> .</li>
    <li>To allow producer and consumer processes to run concurrently, we must have available a <b>buffer of items</b> that can be filled by the producer and emptied by the consumer.</li>
    <li>This buffer will reside in a region of memory that is shared by the producer and consumer processes.</li>
</ul>

<h5>Two types of buffers</h5>
<ol>
    <li><b>Unbounded buffer</b> - Places no practical limit on the size of the buffer. The consumer may have to wait for new items, but the producer can always produce new items.</li>
    <li><b>Bounded buffer</b> - Assumes a fixed buffer size. In this case, the consumer must wait if the buffer is empty, and the producer must wait if the buffer is full.</li>
</ol>





























































































































































































































































































































































































































































































































































































<%- include('./osPartials/templateEnd') %>
